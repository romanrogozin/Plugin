//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace MyNamespace
{
    #pragma warning disable // Disable all warnings

    
    public enum UserProfession
    {
        None = 0,
    
        Bot = 1,
    
        InternalTester = 3,
    
        Developer = 5,
    
        InternalPlayTester = 7,
    
        BnetTester = 13,
    
        BnetPlayer = 19,
    
        SteamTester = 23,
    
        SteamPlayer = 29,
    
        XboxTester = 33,
    
        XboxPlayer = 39,
    
        PsnTester = 43,
    
        PsnPlayer = 49,
    
        EpicTester = 53,
    
        EpicPlayer = 59,
    
        FirebaseTester = 63,
    
        FirebasePlayer = 69,
    
        Player = 255,
    
    }
    
    
    [System.Flags]
    public enum AccountFlagRule
    {
        None = 0,
    
        SignIn = 1,
    
        Create = 2,
    
        Allow = 3,
    
    }
    
    
    public partial class AuthorizationFactProcessing 
    {
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("Finalize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Finalize { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("Stage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Stage { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("Delay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan Delay { get; set; }
    
    
    }
    
    
    public partial class AuthorizationParameters 
    {
        [Newtonsoft.Json.JsonProperty("CompatibilityCheckDisabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CompatibilityCheckDisabled { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("SoftCheckEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SoftCheckEnabled { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("ClientAddressValidation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ClientAddressValidation { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("GameClientValidationEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GameClientValidationEnabled { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("UseSoftAclPolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseSoftAclPolicy { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("CurrentPersistanceVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrentPersistanceVersion { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("CurrentImportVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrentImportVersion { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("AutoImportEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AutoImportEnabled { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("AutoImportUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoImportUri { get; set; } = "";
    
        [Newtonsoft.Json.JsonProperty("ForcePlayerGroupWhenNoGroupsAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForcePlayerGroupWhenNoGroupsAvailable { get; set; } = "";
    
        [Newtonsoft.Json.JsonProperty("SignInExpiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan SignInExpiration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TokenProlongation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TokenProlongation { get; set; } = 85;
    
        /// <summary>Sleep interval if backend is full</summary>
        [Newtonsoft.Json.JsonProperty("WorkerSleepTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan WorkerSleepTimeout { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SignInTimeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<int, int> SignInTimeouts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SignInCapacityLimiterEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SignInCapacityLimiterEnabled { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("CheckSignatureTimeOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CheckSignatureTimeOffset { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("DegreeOfParallelism", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DegreeOfParallelism { get; set; } = 4;
    
        /// <summary>Sleep interval if queue is empty</summary>
        [Newtonsoft.Json.JsonProperty("QueueReaderSleepTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan QueueReaderSleepTimeout { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSignatureTimeOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxSignatureTimeOffset { get; set; } = 300;
    
        [Newtonsoft.Json.JsonProperty("EnableGeoIpResolve", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoIpResolve { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("RetailBuilds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RetailBuilds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LiveBackend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LiveBackend { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("AllowedProfessions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<UserProfession, AccountFlagRule> AllowedProfessions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PriorityQueueForNonplayers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PriorityQueueForNonplayers { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("CommonQueueProfession", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserProfession CommonQueueProfession { get; set; } = MyNamespace.UserProfession.Player;
    
        [Newtonsoft.Json.JsonProperty("F2Pmode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountFlagRule F2Pmode { get; set; } = MyNamespace.AccountFlagRule.None;
    
        [Newtonsoft.Json.JsonProperty("MinTokenRefreshAfterMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinTokenRefreshAfterMinutes { get; set; } = 5;
    
        [Newtonsoft.Json.JsonProperty("SignInRateLimiterMaxRequestCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SignInRateLimiterMaxRequestCount { get; set; } = 200;
    
        [Newtonsoft.Json.JsonProperty("SignInRateLimiterInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.TimeSpan SignInRateLimiterInterval { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AuthFactProcessingOnSignout", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AuthorizationFactProcessing AuthFactProcessingOnSignout { get; set; } = new AuthorizationFactProcessing();
    
        [Newtonsoft.Json.JsonProperty("DefaultNicknamePerProviders", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> DefaultNicknamePerProviders { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        [Newtonsoft.Json.JsonProperty("DefaultNickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultNickname { get; set; } = "";
    
        [Newtonsoft.Json.JsonProperty("DelayOnRetryMs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DelayOnRetryMs { get; set; } = 7000;
    
    
    }
}